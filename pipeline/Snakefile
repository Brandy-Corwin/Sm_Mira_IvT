# Change all file paths and change code to be paired end
# Add environment -- How?

configfile: "config.yaml"

rule all:
    input:
        "reports/multiqc_report.html"

rule fastq_qc:
    input:
        "/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}.fastq.gz"
    output:
        html="fastq/qc/{sample}_fastqc.html",
        zip="fastq/qc/{sample}_fastqc.zip"
    params:
        outdir="fastq/qc"
    threads:
        32
    shell:
        "fastqc -t {threads} {input} -o {params.outdir}"

rule trim_filter:
    input:
        "/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}.fastq.gz"
    output:
        "trimmed/{sample}.fastq.gz"
    threads:
        32
    shell:
        "cutadapt -j {threads} -m 20 -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT --nextseq-trim=10 -o {output} {input}"

rule trim_qc:
    input:
        "trimmed/{sample}.fastq.gz"
    output:
        html="trimmed/qc/{sample}_fastqc.html",
        zip="trimmed/qc/{sample}_fastqc.zip"
    params:
        outdir="trimmed/qc"
    threads:
        32
    shell:
        "fastqc -t {threads} {input} -o {params.outdir}"

rule fetch_genome:
    output:
        genome="genome/genome.fa",
        annotations="genome/annotations.gtf"
    run:
        shell("wget -nc -O - https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.genomic.fa.gz | gzip -f -d > {output.genome}")
        shell("wget -O - https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.canonical_geneset.gtf.gz | gzip -f -d > {output.annotations}")

rule star_sa:
    input:
        genome="genome/genome.fa",
        annotations="genome/annotations.gtf"
    output:
        directory("genome/star")
    threads:
        32
    run:
    # Change sjdbOverhang to length - 1
        shell("STAR \
            --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeDir {output}\
            --genomeFastaFiles {input.genome} \
            --sjdbGTFfile {input.annotations} \
            --sjdbOverhang 289 \
            --genomeSAindexNbases 13")

rule star_align_first:
    input:
        expand("trimmed/{sample}.fastq.gz", sample=config["sample"]),
        genome_dir="genome/star",
        manifest="manifest.tsv"
    output:
        out="alignment/star/first-pass.final.out",
        out_sj="alignment/star/SJ.out.tab",
        alignment="alignment/star/Aligned.sortedByCoord.out.bam",
        outdir=directory("alignment/star/")
    threads:
        32
    run:
        shell("STAR \
            --runThreadN {threads} \
            --runMode alignReads \
            --genomeDir {input.genome_dir} \
            --readFilesManifest {input.manifest} \
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outFileNamePrefix alignment/star/")
        shell("cp alignment/star/Log.final.out {output.out}")

rule star_align_second:
    input:
        rules.star_align_first.output.out,
        genome_dir="genome/star",
        manifest="manifest.tsv",
        sj="alignment/star/SJ.out.tab",
        star_dir="alignment/star/"
    output:
        out="alignment/star/second-pass.final.out"
    threads:
        32
    run:
        shell("STAR \
            --runThreadN {threads} \
            --runMode alignReads \
            --genomeDir {input.genome_dir} \
            --readFilesManifest {input.manifest} \
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outSAMattributes NH HI AS nM RG \
            --outFileNamePrefix alignment/star/ \
            --sjdbFileChrStartEnd {input.sj}")
        shell("cp alignment/star/Log.final.out {output.out}")

rule hisat_align:
    input:
        "genome/genome.fa",
        "genome/annotations.gtf",
        files="trimmed/{sample}.fastq.gz",
        index_dir="genome/hisat/"
    params:
        genome_dir="genome/hisat/genome"
    output:
        "alignment/hisat/{sample}.sam"
    threads:
        32
    run:
        shell("hisat2 {params.genome_dir} -p {threads} -U {input.files} --rg-id {wildcards.sample} --rg SM:{wildcards.sample} --summary-file alignment/hisat/{wildcards.sample}.log --new-summary > {output}")

rule convert_hisat:
    input:
        "alignment/hisat/{sample}.sam"
    output:
        "alignment/hisat/{sample}.bam"
    threads:
        32
    run:
        shell("samtools view -@ {threads} -b {input} | samtools sort -@ {threads} > {output}")

rule merge_hisat:
    input:
        expand("alignment/hisat/{sample}.bam", sample=config["sample"])
    output:
        "alignment/hisat/merged.bam"
    threads:
        32
    run:
        shell("samtools merge -@ {threads} {output}  {input}")
        shell("samtools index -@ {threads} {output}")

rule flagstat:
    input:
        "alignment/star/second-pass.final.out",
        star="alignment/star/Aligned.sortedByCoord.out.bam",
        hisat="alignment/hisat/merged.bam"
    output:
        touch("checkers/flagstat_completed.done")
    threads:
        32
    run:
        shell("samtools flagstat -@ {threads} {input.star}")
        shell("samtools flagstat -@ {threads} {input.hisat}")

# Not running right in notebook
# rule qualimap:
#     input:
#         gtf="genome/annotations.gtf",
#         star="alignment/star/Aligned.sortedByCoord.out.bam",
#         hisat="alignment/hisat/merged.bam",
#         check="checkers/flagstat_completed.done"
#     output:
#         no_header_sam="alignment/star/no_header.sam",
#         no_header_bam="alignment/star/no_header.bam",
#         outidr_star=directory("alignment_qc/qualimap/star/bam"),
#         outdir=directory("alignment_qc/qualimap/")
#     threads:
#         32
#     run:
#         shell("samtools view -@ {threads} -h {input.star} | grep -v “^@RG” > {output.no_header_sam}")
#         shell("samtools view -@ {threads} -b {output.no_header_sam} > {output.no_header_bam}")
#         shell("qualimap bamqc -nt {threads} -outdir {output.outdir_star} -bam {output.no_header_bam} --feature-file {input.gtf} -p strand-specific-forward") 

rule mark_duplicates:
    input:
        "checkers/flagstat_completed.done",
        star="alignment/star/Aligned.sortedByCoord.out.bam",
        hisat="alignment/hisat/merged.bam"
    output:
        star="counting/dedup/star.bam",
        hisat="counting/dedup/hisat.bam",
        star_log="counting/logs/star_duplicates",
        hisat_log="counting/logs/hisat_duplicates"
    run:
        shell("picard MarkDuplicates -I {input.star} -M {output.star_log} -O {output.star} --VALIDATION_STRINGENCY SILENT")
        shell("picard MarkDuplicates -I {input.hisat} -M {output.hisat_log} -O {output.hisat} --VALIDATION_STRINGENCY SILENT")

rule count:
    input:
        annotations="genome/annotations.gtf",
        star="counting/dedup/star.bam",
        hisat="counting/dedup/hisat.bam"
    output:
        star="counting/counts/star_counts.tsv",
        hisat="counting/counts/hisat_counts.tsv"
    threads:
        32
    run:
    # Do I need -t here?
        shell("featureCounts -T 32 \
        {input.star} \
        -T {threads} \
        --byReadGroup \
        -s 1 \
        --ignoreDup \
        -M \
        --fraction \
        -a {input.annotations} \
        -t 'CDS' \
        -o {output.star} \
        --verbose")
    
    # Do I need -t here?
        shell("featureCounts -T 32 \
        {input.hisat} \
        -T {threads} \
        --byReadGroup \
        -s 1 \
        --ignoreDup \
        -M \
        --fraction \
        -a {input.annotations} \
        -t 'CDS' \
        -o {output.hisat} \
        --verbose")

rule report:
    input:
        expand("fastq/qc/{sample}_fastqc.html", sample=config["sample"]),
        expand("trimmed/qc/{sample}_fastqc.html", sample=config["sample"]),
        "alignment/star/second-pass.final.out",
        expand("alignment/hisat/{sample}.sam", sample=config["sample"]),
        "alignment/hisat/merged.bam",
        "checkers/flagstat_completed.done",
        "counting/counts/star_counts.tsv",
        "counting/counts/hisat_counts.tsv"
        #"alignment/star/no_header.bam"?
    params:
        fastq_qc_dir=rules.fastq_qc.params.outdir,
        trim_qc_dir=rules.trim_qc.params.outdir,
        star_align_dir="alignment/star/",
        hisat_align_dir="alignment/hisat/",
        counts_dir="counting/counts/"
        #qualimap_dir=rules.qualimap.output.outdir
    output:
        "reports/multiqc_report.html"
    shell:
        "multiqc --force -d {params.fastq_qc_dir} {params.trim_qc_dir} {params.star_align_dir} {params.hisat_align_dir} {params.counts_dir} -n {output}"
        # ADD {params.qualimap_dir} to output